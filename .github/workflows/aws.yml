name: Development Deploy to Amazon ECS

on:
  push:
    branches: [ "develop" ]

env:
  AWS_REGION: ap-southeast-1
  ECR_REPOSITORY: blythe-server/blockchain
  ECS_SERVICE: layanan-blockchain-service-hsprn7w
  ECS_CLUSTER: sophisticated-butterfly-907z6l
  ECS_TASK_DEFINITION: task-definition.json
  CONTAINER_NAME: blockchain

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: development

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials (OIDC)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::150810356770:role/GitHubActionsECSRole
        aws-region: ${{ env.AWS_REGION }}

    # ---- Preflight: pastikan cluster & service ada ----
    - name: Preflight check - cluster & service
      shell: bash
      run: |
        set -euo pipefail
        echo "Region: ${AWS_REGION}"
        echo "Cluster: ${ECS_CLUSTER}"
        echo "Service: ${ECS_SERVICE}"

        echo "== List clusters =="
        aws ecs list-clusters --region "$AWS_REGION"

        echo "== List services in cluster =="
        aws ecs list-services --cluster "$ECS_CLUSTER" --region "$AWS_REGION"

        echo "== Describe target service =="
        DESC=$(aws ecs describe-services --cluster "$ECS_CLUSTER" --services "$ECS_SERVICE" --region "$AWS_REGION")
        STATUS=$(echo "$DESC" | jq -r '.failures[0].reason // empty')
        if [[ "$STATUS" == "MISSING" || -z "$DESC" ]]; then
          echo "ERROR: Service '$ECS_SERVICE' tidak ditemukan di cluster '$ECS_CLUSTER' (region $AWS_REGION)."
          echo "Hint: Cek nama persis di ECS Console & pastikan region/cluster sesuai."
          exit 1
        fi
        echo "OK: Service ditemukan."

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        set -euo pipefail
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Render task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy to Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}   # NAMA service
        cluster: ${{ env.ECS_CLUSTER }}   # NAMA cluster
        wait-for-service-stability: true
